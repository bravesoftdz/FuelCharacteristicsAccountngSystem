unit StandardEmployeeAccountsAccessRightsService;

interface

uses

  EmployeeAccountsAccessRightsService,
  EmployeeAccountsAccessRightsInfo,
  FuelCharacteristicsAccountingSystemAuthorizationService,
  EmployeeRepository,
  Employee,
  SysUtils,
  Classes;

type

  TStandardEmployeeAccountsAccessRightsService =
    class (TInterfacedObject, IEmployeeAccountsAccessRightsService)

      private

        FSystemAuthorizationService:
          IFuelCharacteristicsAccountingSystemAuthorizationService;

      public

      constructor Create(
        SystemAuthorizationService:
          IFuelCharacteristicsAccountingSystemAuthorizationService
      );
      
        function GetEmployeeAccountsAccessRightsInfoFor(
          const ClientIdentity: Variant
        ): TEmployeeAccountsAccessRightsInfo;
      
    end;

implementation

uses

  IDomainObjectBaseUnit,
  Variants;

{ TStandardEmployeeAccountsAccessRightsService }

constructor TStandardEmployeeAccountsAccessRightsService.Create(
  SystemAuthorizationService:
    IFuelCharacteristicsAccountingSystemAuthorizationService
);
begin

  inherited Create;

  FSystemAuthorizationService := SystemAuthorizationService;
  
end;

function TStandardEmployeeAccountsAccessRightsService.
  GetEmployeeAccountsAccessRightsInfoFor(
    const ClientIdentity: Variant
  ): TEmployeeAccountsAccessRightsInfo;
var Employee: TEmployee;
    Free: IDomainObjectBase;
begin

  if FSystemAuthorizationService.IsClientWarehouseHead(ClientIdentity)
  then begin

    Result :=
      TEmployeeAccountsAccessRightsInfo.Create;

    Result.ViewEmployeesInfoAllowed := True;
    Result.AddingEmployeesInfoAllowed := True;
    Result.ChangingEmployeesInfoAllowed := True;
    Result.RemovingEmployeesInfoAllowed := True;

  end

  else begin

    raise TEmployeeAccountsAccessRightsServiceException.CreateFmt(
      '” сотрудника отсутствуют права ' +
      'доступа к управлению учЄтными запис€ми ' +
      'сотрудников',
      [
        Employee.FullName
      ]
    );

  end;

end;

end.
