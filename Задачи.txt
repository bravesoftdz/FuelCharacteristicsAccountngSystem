1) Узнать роли системы и для каждой из ролей соответствующие права доступа (авиатехник, бухгалтер, нач склада)
1) Обычный сотрудник видит выполненные им расчёты (да, редактирует только за свою смену и просматривает все свои расчёты)
Сотрудники каких ролей (бухгалтер, начальник склада и т.д.) видят какое множество расчётов (всё расчёты или их часть) ? (
бухгалтер видит все расчёты как и начальник склада, начальник склада может удалять и редактировать все записи)
2) Может ли сотрудник обычный удалять записи с данными о результатах собственных расчётах объёма топлива ? (да,
но только за свою смену)
Должен ли быть какой-нибудь привелигированный сотрудник, который мог бы удалять любые записи ? (нач склада)
3) Тип резервуара в окне и тип топлива как должны подбираться в тесктовое поле окна ?
4) Архивирование - это процесс помещения расчётов в некоторый архив для формирования истории выполнявшихся ранее расчётов ?
В результате архивирования пользователи программы перестают видеть данные, попавшие в архив. С точки зрения нагрузки
на программу и продуктивной работы пользователя лучше отображать не все расчёты, а только те, которые не были архивированы.
Если пользователям потребуется история прошлых расчётов, система должна предоставлять выборку расчётов из архива по
идентификационным данным затребовавшего сотрудника ? Каким образом будет запускаться процесс архивирования ? Автоматически
по каким-то условиям или вручную через соответствующий интерфейс графический, например, от имени только
начальника склада ? (автоматически, с указанием в разделе администрирования для начальника склада промежутка времени,
по истечение которого будет запускаться процесс архивирования)


Программная составляющая:
1) проверить работоспособность программы на ОС Windows 2000/XP через VirtualBox
2) На усмотрению выполнить рефакторинг всего проекта, выработав для различных слоёв многослойной архитектуры
программы каркас схемотичных классов, обеспечивающих гибкое создание CRUD-программ в будущем с минимальными усилиями.
То есть, базовые классы сервисных контроллеров форм, базовые абстрактные классы CRUD-сервисов, для которых
характерно наличие двух сущностей в операции - пользователь, выполняющие операцию, и объект, над которых
проводится операция, возможно, с использованием классов авторизации и аутентификации.