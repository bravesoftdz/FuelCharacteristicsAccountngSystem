unit StandardFuelCharacteristicsCalculationServiceRegistry;

interface

uses

  FuelCharacteristicsCalculationServiceRegistry,
  ElectronicMetroshtok,
  ReservoirCalibrationChartRegistry,
  ReservoirSubLayerKindAccountingService,
  FuelCharacteristicsCalculationService;

type

  TFuelCharacteristicsCalculationServiceRegistry =
    class (TInterfacedObject, IFuelCharacteristicsCalculationServiceRegistry)

      private

        FElectronicMetroshtok: IElectronicMetroshtok;

        FReservoirSubLayerKindAccountingService:
          IReservoirSubLayerKindAccountingService;
          
        FReservoirCalibrationChartRegistry: IReservoirCalibrationChartRegistry;

        FFuelCharacteristicsCalculationService:
          IFuelCharacteristicsCalculationService;

      private

        class var FInstance: IFuelCharacteristicsCalculationServiceRegistry;
        
        class function GetInstance:
          IFuelCharacteristicsCalculationServiceRegistry; static;

      private

        procedure RaiseExceptionIfFuelCharacteristicsCalculationServiceRegistrationOrderIsNotValid;

      public

        procedure RegisterElectronicMetroshtok(
          ElectronicMetroshtok: IElectronicMetroshtok
        );

        function GetElectronicMetroshtok: IElectronicMetroshtok;

      public

        procedure RegisterReservoirSubLayerKindAccountingService(
          ReservoirSubLayerKindAccountingService:
            IReservoirSubLayerKindAccountingService
        );

        function GetReservoirSubLayerKindAccountingService:
          IReservoirSubLayerKindAccountingService;

        procedure RegisterStandardReservoirSubLayerKindAccountingService;
    
      public

        procedure RegisterReservoirCalibrationChartRegistry(
          ReservoirCalibrationChartRegistry: IReservoirCalibrationChartRegistry
        );

        function GetReservoirCalibrationChartRegistry: IReservoirCalibrationChartRegistry;

      public
      
        procedure RegisterFuelCharacteristicsCalculationService(
          FuelCharacteristicsCalculationService:
            IFuelCharacteristicsCalculationService
        );

        function GetFuelCharacteristicsCalculationService:
          IFuelCharacteristicsCalculationService;

        procedure RegisterStandardFuelCharacteristicsCalculationService;

      public

        procedure Clear;

        class property Current: IFuelCharacteristicsCalculationServiceRegistry
        read GetInstance write FInstance;
        
    end;

implementation

uses

  StandardReservoirSubLayerKindAccountingService,
  StandardFuelCharacteristicsCalculationService,
  StandardReservoirKindStorageServiceRegistry;

{ TFuelCharacteristicsCalculationServiceRegistry }

procedure TFuelCharacteristicsCalculationServiceRegistry.Clear;
begin

  FElectronicMetroshtok := nil;
  FReservoirSubLayerKindAccountingService := nil;
  FReservoirCalibrationChartRegistry := nil;
  FFuelCharacteristicsCalculationService := nil;
  
end;

function TFuelCharacteristicsCalculationServiceRegistry.
  GetElectronicMetroshtok: IElectronicMetroshtok;
begin

  Result := FElectronicMetroshtok;

end;

function TFuelCharacteristicsCalculationServiceRegistry.
  GetFuelCharacteristicsCalculationService: IFuelCharacteristicsCalculationService;
begin

  Result := FFuelCharacteristicsCalculationService;

end;

class function TFuelCharacteristicsCalculationServiceRegistry.
  GetInstance: IFuelCharacteristicsCalculationServiceRegistry;
begin

  if not Assigned(FInstance) then
    FInstance := TFuelCharacteristicsCalculationServiceRegistry.Create;
    
  Result := FInstance;

end;

function TFuelCharacteristicsCalculationServiceRegistry.
  GetReservoirCalibrationChartRegistry: IReservoirCalibrationChartRegistry;
begin

  Result := FReservoirCalibrationChartRegistry;
  
end;

function TFuelCharacteristicsCalculationServiceRegistry.
  GetReservoirSubLayerKindAccountingService:
    IReservoirSubLayerKindAccountingService;
begin

  Result := FReservoirSubLayerKindAccountingService;
  
end;

procedure TFuelCharacteristicsCalculationServiceRegistry.RaiseExceptionIfFuelCharacteristicsCalculationServiceRegistrationOrderIsNotValid;
begin

  if
    not Assigned(FElectronicMetroshtok) or
    not Assigned(FReservoirSubLayerKindAccountingService) or
    not Assigned(FReservoirCalibrationChartRegistry) or
    not Assigned(
      TReservoirKindStorageServiceRegistry
        .Current
          .GetReservoirKindReferenceSuiteDirectory
    )
  then begin

    raise TFuelCharacteristicsCalculationServiceRegistryException.Create(
      'Неправильный порядок регистрации ' +
      'предметной службы'
    );

  end;

end;

procedure TFuelCharacteristicsCalculationServiceRegistry.RegisterElectronicMetroshtok(
  ElectronicMetroshtok: IElectronicMetroshtok);
begin

  if Assigned(FFuelCharacteristicsCalculationService) then begin

    raise TFuelCharacteristicsCalculationServiceRegistryException.Create(
      'Неправильный порядок регистрации ' +
      'предметной службы'
    );

  end;

  FElectronicMetroshtok := ElectronicMetroshtok;
  
end;

procedure TFuelCharacteristicsCalculationServiceRegistry.
  RegisterFuelCharacteristicsCalculationService(
    FuelCharacteristicsCalculationService: IFuelCharacteristicsCalculationService
  );
begin

  RaiseExceptionIfFuelCharacteristicsCalculationServiceRegistrationOrderIsNotValid;
  
  FFuelCharacteristicsCalculationService := FuelCharacteristicsCalculationService;
  
end;

procedure TFuelCharacteristicsCalculationServiceRegistry.
  RegisterReservoirCalibrationChartRegistry(
    ReservoirCalibrationChartRegistry: IReservoirCalibrationChartRegistry
  );
begin

  if Assigned(FFuelCharacteristicsCalculationService) then begin

    raise TFuelCharacteristicsCalculationServiceRegistryException.Create(
      'Неправильный порядок регистрации ' +
      'предметной службы'
    );
    
  end;

  FReservoirCalibrationChartRegistry := ReservoirCalibrationChartRegistry;
  
end;

procedure TFuelCharacteristicsCalculationServiceRegistry.
  RegisterReservoirSubLayerKindAccountingService(
    ReservoirSubLayerKindAccountingService:
      IReservoirSubLayerKindAccountingService
  );
begin

  if Assigned(FFuelCharacteristicsCalculationService) then begin

    raise TFuelCharacteristicsCalculationServiceRegistryException.Create(
      'Неправильный порядок регистрации ' +
      'предметной службы'
    );

  end;

  FReservoirSubLayerKindAccountingService :=
    ReservoirSubLayerKindAccountingService;
    
end;

procedure TFuelCharacteristicsCalculationServiceRegistry.
  RegisterStandardFuelCharacteristicsCalculationService;
begin

  RaiseExceptionIfFuelCharacteristicsCalculationServiceRegistrationOrderIsNotValid;

  FFuelCharacteristicsCalculationService :=
    TStandardFuelCharacteristicsCalculationService.Create(

      FElectronicMetroshtok,

      FReservoirSubLayerKindAccountingService,
      
      TReservoirKindStorageServiceRegistry
        .Current
          .GetReservoirKindReferenceSuiteDirectory,

      FReservoirCalibrationChartRegistry
    );

end;

procedure TFuelCharacteristicsCalculationServiceRegistry.
  RegisterStandardReservoirSubLayerKindAccountingService;
begin

  if Assigned(FFuelCharacteristicsCalculationService) then begin

    raise TFuelCharacteristicsCalculationServiceRegistryException.Create(
      'Неправильный порядок регистрации ' +
      'предметной службы'
    );

  end;

  FReservoirSubLayerKindAccountingService :=
    TStandardReservoirSubLayerKindAccountingService.Create;

end;

end.
