unit StandardEmployeeFuelCharacteristicsCalculationCardRemovingRule;

interface

uses

  EmployeeFuelCharacteristicsCalculationCardWorkingRule,
  EmployeeFuelCharacteristicsCalculationCardRemovingRule,
  AbstractEmployeeFuelCharacteristicsCalculationCardAccessingRule,
  Employee,
  FuelCharacteristicsCalculationCard,
  SysUtils,
  Classes;

type

  TStandardEmployeeFuelCharacteristicsCalculationCardRemovingRule =
    class (
      TAbstractEmployeeFuelCharacteristicsCalculationCardAccessingRule,
      IEmployeeFuelCharacteristicsCalculationCardRemovingRule
    )

      public

        procedure EnsureSatisfiedBy(
          Employee: TEmployee;
          FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
        ); override;

      public

        procedure EnsureEmployeeMayRemoveFuelCharacteristicsCalculationCard(
          Employee: TEmployee;
          FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
        ); virtual;

        function MayEmployeeRemoveFuelCharacteristicsCalculationCard(
          Employee: TEmployee;
          FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
        ): Boolean; virtual;
        
    end;
  
implementation

{ TStandardEmployeeFuelCharacteristicsCalculationCardRemovingRule }

procedure TStandardEmployeeFuelCharacteristicsCalculationCardRemovingRule.
  EnsureEmployeeMayRemoveFuelCharacteristicsCalculationCard(
    Employee: TEmployee;
    FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
  );
begin

  EnsureSatisfiedBy(Employee, FuelCharacteristicsCalculationCard);
  
end;

procedure TStandardEmployeeFuelCharacteristicsCalculationCardRemovingRule.
  EnsureSatisfiedBy(
    Employee: TEmployee;
    FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
  );
begin

  if Employee.IsWarehouseHead then
    Exit;

  if
    not
    FEmployeeFuelCharacteristicsCalculationCardOwningRule.
      IsEmployeeFuelCharacteristicsCalculationCardOwner(
        Employee, FuelCharacteristicsCalculationCard
      )
  then begin

    raise
    TEmployeeFuelCharacteristicsCalculationCardWorkingRuleException.CreateFmt(
      'У сотрудника "%s" отсутствуют права ' +
      'на удаление карточки',
      [
        Employee.FullName
      ]
    );
    
  end;

end;

function TStandardEmployeeFuelCharacteristicsCalculationCardRemovingRule.
  MayEmployeeRemoveFuelCharacteristicsCalculationCard(
    Employee: TEmployee;
    FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
  ): Boolean;
begin

  Result := IsSatisfiedBy(Employee, FuelCharacteristicsCalculationCard);
  
end;

end.
