unit StandardEmployeeFuelCharacteristicsCalculationCardOwningRule;

interface

uses

  EmployeeFuelCharacteristicsCalculationCardWorkingRule,
  EmployeeFuelCharacteristicsCalculationCardOwningRule,
  AbstractEmployeeFuelCharacteristicsCalculationCardWorkingRule,
  Employee,
  FuelCharacteristicsCalculationCard,
  SysUtils,
  Classes;

type

  TStandardEmployeeFuelCharacteristicsCalculationCardOwningRule =
    class (
      TAbstractEmployeeFuelCharacteristicsCalculationCardWorkingRule,
      IEmployeeFuelCharacteristicsCalculationCardOwningRule
    )

      public

        procedure EnsureSatisfiedBy(
          Employee: TEmployee;
          FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
        ); override;

      public

        procedure EnsureEmployeeIsFuelCharacteristicsCalculationCardOwner(
          Employee: TEmployee;
          FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
        ); virtual;

        function IsEmployeeFuelCharacteristicsCalculationCardOwner(
          Employee: TEmployee;
          FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
        ): Boolean; virtual;

    end;

implementation

{ TStandardEmployeeFuelCharacteristicsCalculationCardOwningRule }

procedure TStandardEmployeeFuelCharacteristicsCalculationCardOwningRule.
  EnsureEmployeeIsFuelCharacteristicsCalculationCardOwner(
    Employee: TEmployee;
    FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
  );
begin

  EnsureSatisfiedBy(Employee, FuelCharacteristicsCalculationCard);
  
end;

procedure TStandardEmployeeFuelCharacteristicsCalculationCardOwningRule.
  EnsureSatisfiedBy(
    Employee: TEmployee;
    FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
  );
var EmployeePerformedCalculation: Boolean;
    EmployeeHasValidRole: Boolean;
begin

  EmployeePerformedCalculation :=
    Employee.Identity =
    FuelCharacteristicsCalculationCard.PerformedCalculationEmployeeId;

  EmployeeHasValidRole :=
    Employee.IsAircraftTechnician or Employee.IsWarehouseHead;
    
  if not (EmployeePerformedCalculation and EmployeeHasValidRole)
  then begin

    raise
    TEmployeeFuelCharacteristicsCalculationCardWorkingRuleException.CreateFmt(
      'Сотрудник "%s" не является ' +
      'владельцем карточки',
      [
        Employee.FullName
      ]
    );
    
  end;
  
end;

function TStandardEmployeeFuelCharacteristicsCalculationCardOwningRule.
  IsEmployeeFuelCharacteristicsCalculationCardOwner(
    Employee: TEmployee;
    FuelCharacteristicsCalculationCard: TFuelCharacteristicsCalculationCard
  ): Boolean;
begin

end;

end.
