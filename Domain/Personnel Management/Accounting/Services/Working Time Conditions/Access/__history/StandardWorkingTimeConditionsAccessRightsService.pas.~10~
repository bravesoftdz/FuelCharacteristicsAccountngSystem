unit StandardWorkingTimeConditionsAccessRightsService;

interface

uses

  WorkingTimeConditions,
  Employee,
  AbstractDomainService,
  WorkingTimeConditionsAccessRights,
  WorkingTimeConditionsAccessRightsService,
  SysUtils,
  Classes;

type

  TStandardWorkingTimeConditionsAccessRightsService =
    class (
      TAbstractStandardDomainService,
      IWorkingTimeConditionsAccessRightsService
    )

      public

        function EnsureAndGetWorkingTimeConditionsAccessRightsForEmployee(
          WorkingTimeConditions: TWorkingTimeConditions;
          Employee: TEmployee
        ): TWorkingTimeConditionsAccessRights; virtual;

    end;


implementation

{ TStandardWorkingTimeConditionsAccessRightsService }

function TStandardWorkingTimeConditionsAccessRightsService.
  EnsureAndGetWorkingTimeConditionsAccessRightsForEmployee(
    WorkingTimeConditions: TWorkingTimeConditions;
    Employee: TEmployee
  ): TWorkingTimeConditionsAccessRights;

begin

  Result := TWorkingTimeConditionsAccessRights.Create;

  try

    with WorkingTimeConditions.Rules do begin

      Result.CanBeViewed :=
        AccessingRule.MayWorkingTimeConditionsBeAccessedByEmployee(
          WorkingTimeConditions, Employee
        );
        
    end;

  except

    on E: Exception do begin

      FreeAndNil(Result);

      raise;

    end;

  end;

end;

end.
