unit BasedOnRepositoryWorkingTimeConditionsDirectory;

interface

uses

  AbstractWorkingTimeConditionsDirectory,
  WorkingTimeConditions,
  WorkingTimeConditionsRepository,
  SysUtils,
  Classes;

type

  TBasedOnRepositoryWorkingTimeConditionsDirectory =
    class (TAbstractWorkingTimeConditionsDirectory)

      private

        FWorkingTimeConditionsRepository: IWorkingTimeConditionsRepository;
        
      protected

        function InternalFindActiveWorkingTimeConditions:
          TWorkingTimeConditions; override;

        function InternalFindWorkingTimeConditions(
          const WorkingTimeConditionsId: Variant
        ): TWorkingTimeConditions; override;

        procedure InternalPutWorkingTimeConditions(
          WorkingTimeConditions: TWorkingTimeConditions
        ); override;

        procedure InternalModifyWorkingTimeConditions(
          WorkingTimeConditions: TWorkingTimeConditions
        ); override;

        procedure InternalRemoveWorkingTimeConditions(
          WorkingTimeConditions: TWorkingTimeConditions
        ); override;

    end;

  
implementation

{ TBasedOnRepositoryWorkingTimeConditionsDirectory }

function TBasedOnRepositoryWorkingTimeConditionsDirectory.InternalFindActiveWorkingTimeConditions: TWorkingTimeConditions;
begin

end;

function TBasedOnRepositoryWorkingTimeConditionsDirectory.InternalFindWorkingTimeConditions(
  const WorkingTimeConditionsId: Variant): TWorkingTimeConditions;
begin

end;

procedure TBasedOnRepositoryWorkingTimeConditionsDirectory.InternalModifyWorkingTimeConditions(
  WorkingTimeConditions: TWorkingTimeConditions);
begin
  inherited;

end;

procedure TBasedOnRepositoryWorkingTimeConditionsDirectory.InternalPutWorkingTimeConditions(
  WorkingTimeConditions: TWorkingTimeConditions);
begin
  inherited;

end;

procedure TBasedOnRepositoryWorkingTimeConditionsDirectory.InternalRemoveWorkingTimeConditions(
  WorkingTimeConditions: TWorkingTimeConditions);
begin
  inherited;

end;

end.
