unit StubEmployeesAdministrationReferenceFormController;

interface

uses

  BaseEmployeesAdministrationReferenceFormController,
  Event,
  AbstractFormController,
  ReferenceFormViewModel,
  EventBus,
  Forms,
  FuelCharacteristicsAccountingSystemFormControllerEvents,
  SysUtils,
  Classes;

type

  TStubEmployeesAdministrationReferenceFormController =
    class (TBaseEmployeesAdministrationReferenceFormController)

      protected

        function CreateReferenceFormViewModel: TReferenceFormViewModel; override;

        procedure SubscribeOnEvents(EventBus: IEventBus); override;

      protected

        procedure OnEmployeeRoleNamesRequestedEventHandler(
          Sender: TObject;
          var EmployeeRoleNames: TStrings
        ); override;

      protected

        procedure OnFuelCharacteristicsAccountingSystemAdministrationFormRequestedEventHandler(
          Event: TFuelCharacteristicsAccountingSystemAdministrationFormRequestedEvent
        );

      public

        procedure Handle(Event: TEvent); override;

    end;


implementation

uses

  EmployeesAdministrationReferenceRecordViewModel,
  EmployeesAdministrationReferenceFormViewModel;
  

{ TStubEmployeesAdministrationReferenceFormController }

function TStubEmployeesAdministrationReferenceFormController.CreateReferenceFormViewModel: TReferenceFormViewModel;
begin

  Result := TEmployeesReferenceFormViewModel.Create;

  Result.AddingRecordAllowed := True;
  Result.EditingRecordAllowed := True;
  Result.RemovingRecordAllowed := True;

  Result.DataSetHolder :=
    TEmployeesReferenceDataSetHolder.CreateFrom(
      TTestEmployeesReferenceFormDataModule.Create(Application).TestEmployeesClientDataSet
    );

  Result.DataSetHolder.FieldDefs :=
    TEmployeesReferenceDataSetFieldDefs.Create;

  Result.DataSetHolder.RecordIdGenerator :=
    TNegativeIntegerDataSetRecordIdGenerator.Create(
      TIntegerDataSetRecordIdGenerator.Create
    );

  with Result.DataSetHolder as TEmployeesReferenceDataSetHolder do begin

    IdFieldName := 'id';
    IsRecordIdGeneratedFieldName := 'is_record_id_generated';
    NameFieldName := 'name';
    SurnameFieldName := 'surname';
    PatronymicFieldName := 'patronymic';
    BirthDateFieldName := 'birth_date';
    SpecialityFieldName := 'speciality';
    CanBeChangedFieldName := 'can_be_changed';
    CanBeRemovedFieldName := 'can_be_removed';

  end;
  
end;

procedure TStubEmployeesAdministrationReferenceFormController.Handle(
  Event: TEvent);
begin

  if Event is TFuelCharacteristicsAccountingSystemAdministrationFormRequestedEvent
  then begin

    OnFuelCharacteristicsAccountingSystemAdministrationFormRequestedEventHandler(
      Event as TFuelCharacteristicsAccountingSystemAdministrationFormRequestedEvent
    );

  end

  else inherited;

end;

procedure TStubEmployeesAdministrationReferenceFormController.
  OnEmployeeRoleNamesRequestedEventHandler(
    Sender: TObject;
    var EmployeeRoleNames: TStrings
  );
begin

  inherited;

  // refactor: from dto in the future

  EmployeeRoleNames.Add('Авиатехник');
  EmployeeRoleNames.Add('Бухгалтер');
  EmployeeRoleNames.Add('Начальник склада');
  
end;

procedure TStubEmployeesAdministrationReferenceFormController.
  OnFuelCharacteristicsAccountingSystemAdministrationFormRequestedEventHandler(
    Event: TFuelCharacteristicsAccountingSystemAdministrationFormRequestedEvent
  );
begin

  ShowFormAsModal(TFormData.Create(Application));
  
end;

procedure TStubEmployeesAdministrationReferenceFormController.SubscribeOnEvents(
  EventBus: IEventBus);
begin

  inherited;

  EventBus.RegisterEventHandler(
    TFuelCharacteristicsAccountingSystemAdministrationFormRequestedEvent,
    Self
  );
  
end;

end.
