unit unFuelCharacteristicsCalculationCardForm;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, DialogFormUnit, cxGraphics, cxLookAndFeels, cxLookAndFeelPainters,
  Menus, dxSkinsCore, dxSkinsDefaultPainters, StdCtrls, cxButtons,
  ValidateEditUnit, RegExprValidateEditUnit, ComCtrls,
  FuelCharacteristicsCalculationCardFormViewModel, Disposable;

type

  TOnFuelCharacteristicsCalculationRequestedEventHandler =
    procedure (
      Sender: TObject;
      var ViewModel: TFuelCharacteristicsCalculationCardFormViewModel
    ) of object;

  TOnFuelCharacteristicsCalculationChangingRequestedEventHandler =
    procedure (
      Sender: TObject;
      var ViewModel: TFuelCharacteristicsCalculationCardFormViewModel;
      var Success: Boolean
    ) of object;

  TFuelCharacteristicsCalculationCardForm = class(TDialogForm)
    TemperatureLabel: TLabel;
    TemperatureEdit: TRegExprValidateEdit;
    DensityLabel: TLabel;
    DensityEdit: TRegExprValidateEdit;
    FuelRiseLevelLabel: TLabel;
    FuelRiseLevelEdit: TRegExprValidateEdit;
    WhoPerformedCalculationLabel: TLabel;
    FuelInfoGroupBox: TGroupBox;
    FuelVolumeLabel: TLabel;
    FuelVolumeEdit: TRegExprValidateEdit;
    FuelCharacteristicsCalculationButton: TcxButton;
    CalculationPerformingInfoGroupBox: TGroupBox;
    WhoPerformedCalculationEdit: TRegExprValidateEdit;
    CalculationPerformingDateTimeLabel: TLabel;
    CalculationPerformingDateTimePicker: TDateTimePicker;
    ChooseCalculationPerformerButton: TcxButton;
    procedure FuelCharacteristicsCalculationButtonClick(Sender: TObject);
  private

    FOnFuelCharacteristicsCalculationRequestedEventHandler:
      TOnFuelCharacteristicsCalculationRequestedEventHandler;

    FOnFuelCharacteristicsCalculationChangingRequestedEventHandler:
      TOnFuelCharacteristicsCalculationChangingRequestedEventHandler;

    procedure RaiseOnFuelCharacteristicsCalculationRequestedEventHandler(
      var ViewModel: TFuelCharacteristicsCalculationCardFormViewModel
    );

    procedure RaiseOnFuelCharacteristicsCalculationChangingRequestedEventHandler(
      var ViewModel: TFuelCharacteristicsCalculationCardFormViewModel;
      var Success: Boolean
    );

  private

    FViewModel: TFuelCharacteristicsCalculationCardFormViewModel;
    FFreeViewModel: IDisposable;

    function GetViewModel: TFuelCharacteristicsCalculationCardFormViewModel;
    procedure SetViewModel(
      const Value: TFuelCharacteristicsCalculationCardFormViewModel);

    procedure FillControlsByViewModel(
      ViewModel: TFuelCharacteristicsCalculationCardFormViewModel
    );

    procedure FillViewModelByControls;

  protected

    procedure OnOKButtonClicked; override;

    function IsInputDataValid: Boolean;

  public

    destructor Destroy; override;

    property OnFuelCharacteristicsCalculationRequestedEventHandler:
      TOnFuelCharacteristicsCalculationRequestedEventHandler
    read FOnFuelCharacteristicsCalculationRequestedEventHandler
    write FOnFuelCharacteristicsCalculationRequestedEventHandler;

    property OnFuelCharacteristicsCalculationChangingRequestedEventHandler:
      TOnFuelCharacteristicsCalculationChangingRequestedEventHandler
    read FOnFuelCharacteristicsCalculationChangingRequestedEventHandler
    write FOnFuelCharacteristicsCalculationChangingRequestedEventHandler;

    property ViewModel: TFuelCharacteristicsCalculationCardFormViewModel
    read GetViewModel write SetViewModel;

  end;

var
  FuelCharacteristicsCalculationCardForm: TFuelCharacteristicsCalculationCardForm;

implementation

uses

  AuxWindowsFunctionsUnit;

{$R *.dfm}

destructor TFuelCharacteristicsCalculationCardForm.Destroy;
begin

  inherited;

end;

procedure TFuelCharacteristicsCalculationCardForm.FillControlsByViewModel(
  ViewModel: TFuelCharacteristicsCalculationCardFormViewModel);
begin

  with ViewModel do begin

    if not FuelTemperature.Visible then
      TemperatureEdit.Visible := False

    else begin

      TemperatureEdit.Text := VarToStr(FuelTemperature.Value);
      TemperatureEdit.ReadOnly := FuelTemperature.ReadOnly;

    end;

    if not FuelDensity.Visible then
      DensityEdit.Visible := False

    else begin

      DensityEdit.Text := VarToStr(FuelDensity.Value);
      DensityEdit.ReadOnly := FuelDensity.ReadOnly;

    end;

    if not FuelRiseLevel.Visible then
      FuelRiseLevelEdit.Visible := False

    else begin

      FuelRiseLevelEdit.Text := VarToStr(FuelRiseLevel.Value);
      FuelRiseLevelEdit.ReadOnly := FuelRiseLevel.ReadOnly;

    end;

    if not FuelVolume.Visible then
      FuelVolumeEdit.Visible := False

    else begin

      FuelVolumeEdit.Text := VarToStr(FuelVolume.Value);
      FuelVolumeEdit.ReadOnly := FuelVolume.ReadOnly;

    end;

    if not WhoPerformedCalculation.Visible then
      WhoPerformedCalculationEdit.Visible := False

    else begin

      WhoPerformedCalculationEdit.Text := WhoPerformedCalculation.Value;
      WhoPerformedCalculationEdit.ReadOnly := WhoPerformedCalculation.ReadOnly;

    end;

    if not CalculationPerformingDateTime.Visible then
      CalculationPerformingDateTimePicker.Visible := False

    else begin

      CalculationPerformingDateTimePicker.DateTime :=
        CalculationPerformingDateTime.Value;

      CalculationPerformingDateTimePicker.Enabled :=
        CalculationPerformingDateTime.ReadOnly;

    end;

  end;

end;

procedure TFuelCharacteristicsCalculationCardForm.FillViewModelByControls;
begin

  if not Assigned(FViewModel) then Exit;

  with FViewModel do begin
    
    if FuelTemperature.Visible then
      FuelTemperature.Value := StrToFloat(TemperatureEdit.Text);

    if FuelDensity.Visible then
      FuelDensity.Value := StrToFloat(DensityEdit.Text);

    if FuelRiseLevel.Visible then
      FuelRiseLevel.Value := StrToFloat(FuelRiseLevelEdit.Text);

    if FuelVolume.Visible then
      FuelVolume.Value := StrToFloat(FuelVolumeEdit.Text);

    if WhoPerformedCalculation.Visible then
      WhoPerformedCalculation.Value := WhoPerformedCalculationEdit.Text;

    if CalculationPerformingDateTime.Visible then
      CalculationPerformingDateTime.Value := CalculationPerformingDateTimePicker.DateTime;

  end;

end;

procedure TFuelCharacteristicsCalculationCardForm.FuelCharacteristicsCalculationButtonClick(
  Sender: TObject);
var CurrentCardViewModelSnapshot: TFuelCharacteristicsCalculationCardFormViewModel;
begin

  CurrentCardViewModelSnapshot := FViewModel.Clone as TFuelCharacteristicsCalculationCardFormViewModel;

  try

    RaiseOnFuelCharacteristicsCalculationRequestedEventHandler(CurrentCardViewModelSnapshot);

    FillControlsByViewModel(CurrentCardViewModelSnapshot);

  finally

    FreeAndNil(CurrentCardViewModelSnapshot);
    
  end;

end;


procedure TFuelCharacteristicsCalculationCardForm.
  RaiseOnFuelCharacteristicsCalculationChangingRequestedEventHandler(
    var ViewModel: TFuelCharacteristicsCalculationCardFormViewModel;
    var Success: Boolean
  );
begin

  if Assigned(FOnFuelCharacteristicsCalculationChangingRequestedEventHandler)
  then begin

    FOnFuelCharacteristicsCalculationChangingRequestedEventHandler(
      Self, ViewModel, Success
    );

  end;

end;

procedure TFuelCharacteristicsCalculationCardForm.
  RaiseOnFuelCharacteristicsCalculationRequestedEventHandler(
    var ViewModel: TFuelCharacteristicsCalculationCardFormViewModel
  );
begin

  if Assigned(FOnFuelCharacteristicsCalculationRequestedEventHandler)
  then begin

    FOnFuelCharacteristicsCalculationRequestedEventHandler(
      Self, ViewModel
    );

  end;

end;

function TFuelCharacteristicsCalculationCardForm.GetViewModel:
  TFuelCharacteristicsCalculationCardFormViewModel;
begin

  Result := FViewModel;

end;

function TFuelCharacteristicsCalculationCardForm.IsInputDataValid: Boolean;
var IsTemperatureValid, IsDensityValid, IsFuelRiseLevelValid,
    IsFuelVolumeValid, IsWhoPerformedCalculationValid: Boolean;
begin

  IsTemperatureValid := TemperatureEdit.IsValid;
  IsDensityValid := DensityEdit.IsValid;
  IsFuelRiseLevelValid := FuelRiseLevelEdit.IsValid;
  IsFuelVolumeValid := FuelVolumeEdit.IsValid;

  IsWhoPerformedCalculationValid := WhoPerformedCalculationEdit.IsValid;

  Result :=
    IsTemperatureValid and
    IsDensityValid and
    IsFuelRiseLevelValid and
    IsFuelVolumeValid and
    IsWhoPerformedCalculationValid;

end;

procedure TFuelCharacteristicsCalculationCardForm.OnOKButtonClicked;
var FuelCharacteristicsCalculationSuccessChanged: Boolean;
begin

  if not IsInputDataValid then begin

    ShowWarningMessage(
      Self.Handle, 'Не все поля заполнены корректно', 'Сообщение'
    );

    Exit;

  end;

  FillViewModelByControls;

  FuelCharacteristicsCalculationSuccessChanged := True;

  RaiseOnFuelCharacteristicsCalculationChangingRequestedEventHandler(
    FViewModel, FuelCharacteristicsCalculationSuccessChanged
  );

  if FuelCharacteristicsCalculationSuccessChanged then inherited;

end;

procedure TFuelCharacteristicsCalculationCardForm.SetViewModel(
  const Value: TFuelCharacteristicsCalculationCardFormViewModel);
begin

  if FViewModel = Value then Exit;

  FViewModel := Value;
  FFreeViewModel := FViewModel;

  FillControlsByViewModel(FViewModel);

end;

end.
